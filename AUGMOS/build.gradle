import org.apache.commons.io.FileUtils
import org.apache.commons.io.filefilter.FileFilterUtils

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion project.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion

        applicationId 'com.augmos.iink.prototype'
        versionCode 1310
        versionName '1.3.1'

        vectorDrawables.useSupportLibrary true

        multiDexEnabled true
    }
}

dependencies {
    implementation "com.android.support:appcompat-v7:${project.ext.supportLibraryVersion}"
    implementation project(':UIReferenceImplementation')
    //implementation 'com.google.firebase:firebase-firestore:19.0.1'
    // FirebaseUI for Firebase Realtime Database
    //implementation 'com.firebaseui:firebase-ui-database:5.0.0'

    // FirebaseUI for Cloud Firestore
    implementation 'com.firebaseui:firebase-ui-firestore:5.0.0'

    // FirebaseUI for Firebase Auth
    //implementation 'com.firebaseui:firebase-ui-auth:5.0.0'

    // FirebaseUI for Cloud Storage
    implementation 'com.firebaseui:firebase-ui-storage:5.0.0'

    implementation 'ch.qos.logback:logback-core:1.2.3'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'org.slf4j:slf4j-api:1.7.26'

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.github.bumptech.glide:glide:4.9.0'
    // Skip this if you don't want to use integration libraries or configure Glide.
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    implementation 'com.github.lecho:hellocharts-library:1.5.8'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
}

task DownloadAndExtractAssets(type: Copy) {
    def sourceUrls = ['https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-diagram.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-raw-content.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-math.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.3.0/myscript-iink-recognition-text-en_US.zip']
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")
        def zipDir = new File(tmpAssetsDir, "zips")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        if (!zipDir.isDirectory())
            zipDir.mkdirs()

        sourceUrls.each { sourceUrl ->
            ant.get(src: sourceUrl, dest: zipDir.getPath())
        }

        File[] zipFiles = FileUtils.listFiles(zipDir, FileFilterUtils.suffixFileFilter("zip"), FileFilterUtils.trueFileFilter())
        zipFiles.each { File zipFile ->
            from zipTree(zipFile)
            into tmpAssetsDir
        }
    }
}

task CopyAssets(type: Copy, dependsOn: DownloadAndExtractAssets) {
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        def recognitionAssetDir = new File(tmpAssetsDir, "recognition-assets/")

        println "Copying downloaded assets from $recognitionAssetDir to $targetDir"
        from recognitionAssetDir
        into targetDir

        doLast {
            tmpAssetsDir.deleteDir()
        }
    }
}

preBuild.dependsOn(CopyAssets)
